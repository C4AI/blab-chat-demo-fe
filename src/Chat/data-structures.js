/**
 * Represents message types.
 *
 * @property {String} TEXT text message (has only text)
 * @property {String} MEDIA image/audio/video message
 *  (media + optional caption)
 * @property {String} VOICE voice message (only media)
 * @property {String} ATTACHMENT attachment message
 *  (file + optional caption)
 * @property {String} SYSTEM system message
 *  (has `event`, may have `additional_metadata`)
 */
export const MessageTypes = Object.freeze({
  TEXT: "T" /** text messages */,
  MEDIA: "M",
  VOICE: "V",
  ATTACHMENT: "A",
  SYSTEM: "S",
});

/**
 * Represents a message.
 */
export class Message {
  /**
   * Create a message.
   *
   * @param {string} type message type (see {@link MessageTypes})
   * @param {Date} time when the message was sent
   * @param {string} localId message id generated by the sender
   * @param {string} id message id
   * @param {string} text message text (for text messages),
   *    transcription (for voice messages)
   *    or caption (for attachment and media messages)
   * @param {string} senderId sender's id
   * @param {string} senderName sender's display name
   * @param {string} downloadUrl download URL
   *    (for voice, media and attachment messages)
   * @param {string} quotedMessageId id of the quoted message
   * @param {string} event event type (for system messages)
   * @param {Object} additionalMetadata additional metadata
   *    (for system messages)
   */
  constructor(
    type,
    time,
    localId,
    id,
    text,
    senderId,
    senderName,
    downloadUrl,
    quotedMessageId,
    event,
    additionalMetadata
  ) {
    this.type = type;
    this.time = time instanceof Date ? time : new Date(time);
    this.localId = localId;
    this.id = id;
    this.text = text;
    this.senderId = senderId;
    this.senderName = senderName;
    this.downloadUrl = downloadUrl;
    this.quotedMessageId = quotedMessageId;
    this.event = event;
    this.additionalMetadata = additionalMetadata;
  }

  /**
   * Convert the message into a plain JS object containing only the data
   * that should be sent to the server.
   *
   * @returns a representation that is ready to be sent to the server
   */
  asObjectToSend() {
    return {
      type: this.type,
      text: this.text,
      quoted_message_id: this.quotedMessageId,
      local_id: this.localId,
    };
  }

  /**
   * Build a `Message` instance from data returned by the server
   *
   * @param {Object} m message data (as received from the server)
   * @param {string} m.type message type (see `MessageTypes`)
   * @param {string} m.time when the message was sent (ISO-8601 format)
   * @param {string} m.local_id message id generated by the sender
   * @param {string} m.id message id
   * @param {string} m.text message text (for text messages),
   *    transcription (for voice messages)
   *    or caption (for attachment and media messages)
   * @param {Object} m.sender who sent the message
   * @param {string} m.sender.id sender's id
   * @param {string} m.sender.name sender's display name
   * @param {string} m.download_url download URL
   *    (for voice, media and attachment messages)
   * @param {string} m.quoted_message_id if of the quoted message
   * @param {string} m.event event type (for system messages)
   * @param {Object} m.additional_metadata additional metadata
   *    (for system messages)
   * @returns an instance of `Message` using the provided data
   */
  static fromServerData(m) {
    return new Message(
      m.type,
      m.time,
      m.local_id,
      m.id,
      m.text,
      m.sender?.id,
      m.sender?.name,
      m.download_url,
      m.quoted_message_id,
      m.event,
      m.additional_metadata
    );
  }
}
